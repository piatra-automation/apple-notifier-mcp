stages:
  - tag
  - build
  - release

variables:
  DXT_FILENAME: apple-notifier-mcp.dxt

create_tag:
  stage: tag
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"  # Using main instead of master
  script:
    - apk add --no-cache git
    - |
      echo "Current branch: $CI_COMMIT_BRANCH"
      echo "Current tag: $CI_COMMIT_TAG"
      
      # Get and display the commit message
      COMMIT_MSG=$(git log -1 --pretty=%B)
      echo "Commit message: '$COMMIT_MSG'"
      
      # Check for regular version tag (^^^)
      if echo "$COMMIT_MSG" | grep "^\^\^\^ v[0-9]\+\.[0-9]\+\.[0-9]\+" > /dev/null; then
        VERSION_TAG=$(echo "$COMMIT_MSG" | sed 's/^\^\^\^ \(v[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')
        echo "Detected version tag: $VERSION_TAG"
        IS_STABLE=false
        
      # Check for stable version tag (^!^)
      elif echo "$COMMIT_MSG" | grep "^\^\!\^ v[0-9]\+\.[0-9]\+\.[0-9]\+" > /dev/null; then
        VERSION_TAG=$(echo "$COMMIT_MSG" | sed 's/^\^\!\^ \(v[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')
        echo "Detected stable version tag: $VERSION_TAG"
        IS_STABLE=true
        
      else
        echo "No valid version tag pattern found."
        echo "Expected format: ^^^ v0.9.0 (regular) or ^!^ v0.9.0 (stable)"
        echo "Got message: '$COMMIT_MSG'"
        echo "TAG_CREATED=false" > variables.env
        exit 0
      fi
      
      # Check if tag exists
      if git rev-parse "$VERSION_TAG" >/dev/null 2>&1; then
        echo "Error: Tag $VERSION_TAG already exists"
        exit 1
      fi
      
      echo "Configuring git..."
      git config --global user.email "${GITLAB_USER_EMAIL:-gitlab-ci@example.com}"
      git config --global user.name "${GITLAB_USER_NAME:-GitLab CI}"
      
      echo "Creating tag..."
      if ! git tag -a "$VERSION_TAG" -m "tagged by build step"; then
        echo "Error: Failed to create tag"
        exit 1
      fi
      
      echo "Setting up remote..."
      # Check if GITLAB_TOKEN is available (Project Access Token or Deploy Token)
      if [ -n "${GITLAB_TOKEN}" ]; then
        echo "Using GITLAB_TOKEN for authentication"
        if ! git remote set-url origin "https://oauth2:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"; then
          echo "Error: Failed to set remote URL"
          exit 1
        fi
      else
        echo "Warning: GITLAB_TOKEN not found. Using CI_JOB_TOKEN (may fail on protected branches)"
        if ! git remote set-url origin "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"; then
          echo "Error: Failed to set remote URL"
          exit 1
        fi
      fi
      
      echo "Pushing tag..."
      if ! git push origin "$VERSION_TAG"; then
        echo "Error: Failed to push tag"
        exit 1
      fi
      
      # Create stable tag if this is a stable release
      if [ "$IS_STABLE" = "true" ]; then
        echo "This is a stable release. Creating/updating stable tag..."
        
        # Delete local stable tag if it exists
        git tag -d stable 2>/dev/null || true
        
        # Create new stable tag pointing to the current commit
        if ! git tag -a "stable" -m "stable version: $VERSION_TAG"; then
          echo "Error: Failed to create stable tag"
          exit 1
        fi
        
        # Force-push the stable tag
        if ! git push -f origin stable; then
          echo "Error: Failed to push stable tag"
          exit 1
        fi
        
        echo "Stable tag successfully updated to $VERSION_TAG"
      fi
      
      echo "Creating variables.env..."
      echo "TAG_CREATED=true" > variables.env
      echo "VERSION_TAG=$VERSION_TAG" >> variables.env
      echo "IS_STABLE=$IS_STABLE" >> variables.env
      echo "Tag creation successful!"
  artifacts:
    reports:
      dotenv: variables.env

build_dxt:
  stage: build
  image: node:18-alpine
  needs:
    - job: create_tag
      artifacts: true
      optional: true
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/  # Run on semantic version tags
    - if: $CI_COMMIT_TAG == "stable"             # Also run on stable tag
    - if: $TAG_CREATED == "true"                 # Run if tag was created in this pipeline
  before_script:
    - apk add --no-cache git zip
    - npm install -g npm@8.12.1  # Match packageManager version
  script:
    - |
      echo "Current tag: $CI_COMMIT_TAG"
      echo "Current ref: $CI_COMMIT_REF_NAME"
      echo "Tag created in pipeline: $TAG_CREATED"
      echo "Version tag from artifact: $VERSION_TAG"
      
      # Determine the version to build
      if [ "$TAG_CREATED" = "true" ] && [ -n "$VERSION_TAG" ]; then
        # Use the version tag from the create_tag job
        VERSION=${VERSION_TAG#v}
        echo "Building DXT for version created in this pipeline: $VERSION"
      elif [ "$CI_COMMIT_TAG" = "stable" ]; then
        # Get the version that stable points to
        git fetch --tags
        VERSION_TAG=$(git describe --tags stable)
        VERSION=${VERSION_TAG#v}
        echo "Building DXT for stable version (pointing to: $VERSION_TAG)"
      elif [ -n "$CI_COMMIT_TAG" ]; then
        # Strip the 'v' prefix from the version tag
        VERSION=${CI_COMMIT_TAG#v}
        echo "Building DXT for version: $VERSION"
      else
        echo "Error: No version tag found!"
        exit 1
      fi
      
      # Update version in package.json
      npm version $VERSION --no-git-tag-version --allow-same-version
      
      # Update version in manifest.json
      sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/" manifest.json
      
      # Install dependencies
      npm ci
      
      # Build the project
      npm run build
      
      # Create the DXT package
      npm run package:dxt
      
      # Verify the DXT file was created
      if [ ! -f "$DXT_FILENAME" ]; then
        echo "Error: DXT file not created!"
        exit 1
      fi
      
      echo "DXT package created successfully: $DXT_FILENAME"
      ls -la $DXT_FILENAME
  artifacts:
    paths:
      - $DXT_FILENAME
    expire_in: 1 week

create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/  # Run on semantic version tags
    - if: $TAG_CREATED == "true" && $IS_STABLE != "true"  # Run if tag was created (but not stable)
  needs:
    - job: create_tag
      artifacts: true
      optional: true
    - job: build_dxt
      artifacts: true
  script:
    - |
      # Determine which tag to use
      if [ "$TAG_CREATED" = "true" ] && [ -n "$VERSION_TAG" ]; then
        RELEASE_TAG="$VERSION_TAG"
        echo "Creating GitLab release for tag created in pipeline: $RELEASE_TAG"
      else
        RELEASE_TAG="$CI_COMMIT_TAG"
        echo "Creating GitLab release for existing tag: $RELEASE_TAG"
      fi
      
      # Get the version number without 'v' prefix
      VERSION=${RELEASE_TAG#v}
      
      # Create release description
      DESCRIPTION="## Apple Notifier MCP v$VERSION

      Enhanced MCP server for macOS notifications with Desktop Extension (DXT) support.

      ### Installation

      1. Install required system dependency:
         \`\`\`bash
         brew install terminal-notifier
         \`\`\`

      2. Download the attached \`$DXT_FILENAME\` file

      3. Double-click the file or drag it to Claude Desktop to install

      ### What's New

      See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

      ### Features

      - üîî Native macOS notifications with terminal-notifier
      - üí¨ Interactive dialog prompts
      - üó£Ô∏è Text-to-speech functionality
      - üì∏ Screenshot capture
      - üìÅ File selection dialogs
      "
      
      # Create the release
      release-cli create \
        --name "v$VERSION" \
        --tag-name "$RELEASE_TAG" \
        --description "$DESCRIPTION" \
        --assets-link "{\"name\":\"$DXT_FILENAME\",\"url\":\"${CI_JOB_URL}/artifacts/file/$DXT_FILENAME\",\"link_type\":\"package\"}"

